class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        
    // Step 1: Count the frequency of each element using an unordered_map
    unordered_map<int, int> freqMap;
    for (int num : nums) {
        freqMap[num]++;
    }

    // Step 2: Use a max-heap (priority_queue) to keep track of the top K elements
    priority_queue<pair<int, int>> maxHeap;
    for (const auto& [num, freq] : freqMap) {
        maxHeap.push({freq, num});
    }

    // Step 3: Extract the top K elements from the max-heap
    vector<int> ans;
    for (int i = 0; i < k; ++i) {
        ans.push_back(maxHeap.top().second);
        maxHeap.pop();
    }

    return ans;
    }
};
