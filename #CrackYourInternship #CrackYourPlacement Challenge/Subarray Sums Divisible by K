//TLE LOGIC (O(N^2))

class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {

        vector<int>sub;

        for(int i=0;i<nums.size();i++){
            int sum = 0;
            for(int j=i;j<nums.size();j++){
                sum+=nums[j];
                sub.push_back(sum);
            }
        }
        int count = 0;
        for(int i=0;i<sub.size();i++){
            if(sub[i] % k == 0){
                count++;
            }
        }
        return count;
    }
};

O(N)
class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {

         std::unordered_map<int, int> prefixSumCount;
    prefixSumCount[0] = 1; // To handle the case where a subarray itself is divisible by k

    int sum = 0;
    int count = 0;

    for(int num : nums) {
        sum += num;
        int remainder = sum % k;

        // Handle negative remainders to keep them in the range [0, k-1]
        if (remainder < 0) {
            remainder += k;
        }

        if (prefixSumCount.find(remainder) != prefixSumCount.end()) {
            count += prefixSumCount[remainder];
        }

        prefixSumCount[remainder]++;
    }

    return count;
    }
};
