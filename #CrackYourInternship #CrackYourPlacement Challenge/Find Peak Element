//1st 

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        
        int left = 0;
        int right = nums.size() - 1;

    while (left < right) {
        int mid = left + (right - left) / 2;

        if (nums[mid] > nums[mid + 1]) {
            // The peak is in the left half including mid
            right = mid;
        } else {
            // The peak is in the right half excluding mid
            left = mid + 1;
        }
    }

    // When left == right, we have found a peak element
    return left;
    }
};

//2nd

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        
        int element = *max_element(nums.begin(),nums.end());
        
        int ans = 0;
       for (int i=0;i< nums.size();i++)
           
           {
           
           if(nums[i] == element)
               {
               ans =  i;
               break;
              }
           }
        
        return ans;
        
    }
};
