//1st

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {

         int k;
        int l;
          for(int i=0;i<nums.size();i++){
                 for(int j=i+1;j<nums.size();j++){
                if(nums[i]+nums[j]==target){
                 k=i;
                 l=j;
                }    

        }}
        return {k,l} ;
       
    }

};

//2nd

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {

       vector<int>v;

       map<int,int>mp;

       for (int i = 0; i < nums.size(); i++) {
        
         int val = target - nums[i];

        if (mp.find(val) != mp.end()) {
            v.push_back(mp[val]);
            v.push_back(i);
            break;
        }
        mp[nums[i]] = i;
    }
    return v;
    }
};

//3rd

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {

        vector<int>v;

        for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++){

                if(nums[i] + nums[j] == target){
                    v.push_back(i);
                    v.push_back(j);
                    break;
                }
            }
        }
        return v;
        
    }
};

//4th

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {

          unordered_map<int, int> m;
        for (int i = 0;; ++i) {
            int x = nums[i];
            int y = target - x;
            if (m.count(y)) {
                return {m[y], i};
            }
            m[x] = i;
        }
        
    }
};
