//1st

class Solution {
public:
    int search(vector<int>& nums, int target) {

        int ans = -1;

        for(int i=0;i<nums.size();i++){
            if(nums[i] == target){
                ans = i;
                break;
            }
        }
        return ans;
        
    }
};

//2nd

class Solution {
public:
    int search(vector<int>& nums, int target) {

         int left = 0, right = nums.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        // Check if the mid element is the target
        if (nums[mid] == target) {
            return mid;
        }

        // Check if the left part is sorted
        if (nums[left] <= nums[mid]) {
            // Check if the target is in the left part
            if (nums[left] <= target && target < nums[mid]) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        // Otherwise, the right part must be sorted
        else {
            // Check if the target is in the right part
            if (nums[mid] < target && target <= nums[right]) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
    }

    // If the target was not found
    return -1;
       
        
    }
};
