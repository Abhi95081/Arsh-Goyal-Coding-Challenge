// 1st Logic
int findDuplicate(vector<int>& nums) {

    // Phase 1: Finding the intersection point of the two runners.
    int tortoise = nums[0];
    int hare = nums[0];
    
    do {
        tortoise = nums[tortoise];
        hare = nums[nums[hare]];
    } while (tortoise != hare);

    // Phase 2: Finding the entrance to the cycle.
    tortoise = nums[0];
    while (tortoise != hare) {
        tortoise = nums[tortoise];
        hare = nums[hare];
    }
    
    return hare;
        
    }

//2nd Logic

int findDuplicate(vector<int>& nums) {

        int size = *max_element(nums.begin(),nums.end());

        vector<int>v(size+1,0);

        for(int i=0;i<nums.size();i++){
            v[nums[i]]++;
        }

        int ans = -1;

        for(int i=0;i<v.size();i++){
            if(v[nums[i]] >= 2){
                ans = nums[i];
                break;
            }
        }
        return ans;
        
    }
